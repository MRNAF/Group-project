import os
import numpy as np
from collections import deque

def find_connected_components(matrix):
    """
    Идентифицирует клетки в матрице.

    Args:
    - matrix (numpy.ndarray): Матрица.

    Returns:
    - list of tuples: Список клеток, где каждая клетка представлена строкой и столбцом.
    """
    def is_valid_neighbor(row, col):
        return 0 <= row < matrix.shape[0] and 0 <= col < matrix.shape[1] and matrix[row, col] == 1

    def bfs(start):
        queue = deque([start])
        visited.add(start)
        component_rows, component_cols = [], []

        while queue:
            row, col = queue.popleft()
            component_rows.append(row)
            component_cols.append(col)

            for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                new_row, new_col = row + dr, col + dc
                if is_valid_neighbor(new_row, new_col) and (new_row, new_col) not in visited:
                    queue.append((new_row, new_col))
                    visited.add((new_row, new_col))

        return component_rows, component_cols

    visited = set()
    components = []

    for row in range(matrix.shape[0]):
        for col in range(matrix.shape[1]):
            if matrix[row, col] == 1 and (row, col) not in visited:
                component_rows, component_cols = bfs((row, col))
                components.append((component_rows, component_cols))

    return components

def find_component_center(component):
    """
    Находит координаты центра клектки.

    Args:
    - component (tuple of lists): Списки координат клетки.

    Returns:
    - tuple: Координаты центра клетки.
    """
    component_rows, component_cols = component
    row_center = sum(component_rows) // len(component_rows)
    col_center = sum(component_cols) // len(component_cols)
    return row_center, col_center

def process_matrices(directory):
    """
    Обрабатывает матрицы из указанной директории.

    Args:
    - directory (str): Путь к директории.
    """
    filenames = sorted(os.listdir(directory))  # Сортируем список файлов по имени
    for filename in filenames:
        filepath = os.path.join(directory, filename)
        matrix = np.loadtxt(filepath)

        print(f"\nПолучаем матрицу из файла: {filename}")

        components = find_connected_components(matrix)
        print("Координаты центров каждой клетки:")
        for i, component in enumerate(components):
            center = find_component_center(component)
            print(f"Cell {i + 1}: {center}")

if __name__ == "__main__":
    directory = 'matrix_series'
    process_matrices(directory)
